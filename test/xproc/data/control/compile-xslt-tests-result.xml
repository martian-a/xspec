<?xml version="1.0" encoding="UTF-8"?>
<report xmlns="http://www.jenitennison.com/xslt/xspec"
        xspec="file:/home/sheila/Code/repositories/my-xspec-fork/test/compile-xslt-tests.xspec"
        stylesheet="file:/home/sheila/Code/repositories/my-xspec-fork/src/compiler/compile-xslt-tests.xsl"
        date="2025-06-11T21:09:46.459617838+01:00">
   <scenario id="scenario1"
             xspec="file:/home/sheila/Code/repositories/my-xspec-fork/test/compile-xslt-tests.xspec">
      <label>x:scenario[@label] transformed in x:compile-scenario template</label>
      <input-wrap xmlns="">
         <t:context xmlns:t="http://www.jenitennison.com/xslt/xspec"
                    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                    href="file:/home/sheila/Code/repositories/my-xspec-fork/test/compile-xslt-tests/compile-scenario.xspec"
                    select="//t:scenario"/>
      </input-wrap>
      <input-wrap xmlns="">
         <t:call xmlns:t="http://www.jenitennison.com/xslt/xspec"
                 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 template="t:compile-scenario">
            <t:param name="call" as="empty-sequence()" tunnel="yes"/>
            <t:param name="context" as="empty-sequence()" tunnel="yes"/>
            <t:param name="reason-for-pending" as="empty-sequence()"/>
            <t:param name="run-sut-now" select="false()"/>
         </t:call>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          name="Q{http://www.jenitennison.com/xslt/xspec}dummy-scenario-id"
                          as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
               <xsl:context-item use="absent"/>
               <xsl:message>my scenario label</xsl:message>
               <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:attribute name="id" namespace="">dummy-scenario-id</xsl:attribute>
                  <xsl:attribute name="xspec" namespace=""/>
                  <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
                     <xsl:text>my scenario label</xsl:text>
                  </xsl:element>
               </xsl:element>
            </xsl:template>
         </content-wrap>
      </result>
      <test id="scenario1-expect1" successful="true">
         <label>
            - is xsl:template
            - @name is Q{XSpec-namespace}scenario-ID
            - the scenario label xsl:message
            - the constructor (xsl:element) of the x:scenario element
            - the constructor (xsl:element) of the x:scenario/x:label element
         </label>
         <expect select="/element()">
            <content-wrap xmlns="">
               <xsl:template xmlns:t="http://www.jenitennison.com/xslt/xspec"
                             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                             name="Q{http://www.jenitennison.com/xslt/xspec}dummy-scenario-id"
                             as="element(Q{http://www.jenitennison.com/xslt/xspec}scenario)">
                  <xsl:context-item use="absent"/>
                  <xsl:message>my scenario label</xsl:message>
                  <xsl:element name="scenario" namespace="http://www.jenitennison.com/xslt/xspec">
                     <xsl:attribute name="id" namespace="">dummy-scenario-id</xsl:attribute>
                     <xsl:attribute name="xspec" namespace=""/>
                     <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
                        <xsl:text>my scenario label</xsl:text>
                     </xsl:element>
                  </xsl:element>
               </xsl:template>
            </content-wrap>
         </expect>
      </test>
   </scenario>
   <scenario id="scenario2"
             xspec="file:/home/sheila/Code/repositories/my-xspec-fork/test/compile-xslt-tests.xspec">
      <label>x:expect[@test] transformed in x:compile-expect template</label>
      <input-wrap xmlns="">
         <t:context xmlns:t="http://www.jenitennison.com/xslt/xspec"
                    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                    href="file:/home/sheila/Code/repositories/my-xspec-fork/test/compile-xslt-tests/compile-expect.xspec"
                    select="//t:expect"/>
      </input-wrap>
      <input-wrap xmlns="">
         <t:call xmlns:t="http://www.jenitennison.com/xslt/xspec"
                 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 template="t:compile-expect">
            <t:param name="call" as="empty-sequence()" tunnel="yes"/>
            <t:param name="context" as="empty-sequence()" tunnel="yes"/>
            <t:param name="reason-for-pending" as="empty-sequence()"/>
            <t:param name="param-uqnames" as="empty-sequence()"/>
         </t:call>
      </input-wrap>
      <result select="/element()">
         <content-wrap xmlns="">
            <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          name="Q{http://www.jenitennison.com/xslt/xspec}dummy-expect-id"
                          as="element(Q{http://www.jenitennison.com/xslt/xspec}test)">
               <xsl:context-item use="absent"/>
               <xsl:message>my expect label</xsl:message>
               <xsl:variable name="Q{urn:x-xspec:compile:impl}expect-d68e5" select="()"><!--expected result--></xsl:variable>
               <!-- wrap $x:result into a document node if possible -->
               <xsl:variable name="Q{urn:x-xspec:compile:impl}test-items" as="item()*">
                  <xsl:choose>
                     <xsl:when test="exists($Q{http://www.jenitennison.com/xslt/xspec}result) and Q{http://www.jenitennison.com/xslt/xspec}wrappable-sequence($Q{http://www.jenitennison.com/xslt/xspec}result)">
                        <xsl:sequence select="Q{http://www.jenitennison.com/xslt/xspec}wrap-nodes($Q{http://www.jenitennison.com/xslt/xspec}result)"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:sequence select="$Q{http://www.jenitennison.com/xslt/xspec}result"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:variable>
               <!-- evaluate the predicate with $x:result (or its wrapper document node) as context item if it is a single item; if not, evaluate the predicate without context item -->
               <xsl:variable name="Q{urn:x-xspec:compile:impl}test-result" as="item()*">
                  <xsl:choose>
                     <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
                        <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                           <xsl:sequence xmlns:t="http://www.jenitennison.com/xslt/xspec"
                                         select="false()"
                                         version="3"/>
                        </xsl:for-each>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:sequence xmlns:t="http://www.jenitennison.com/xslt/xspec"
                                      select="false()"
                                      version="3"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:variable>
               <xsl:variable name="Q{urn:x-xspec:compile:impl}boolean-test"
                             as="Q{http://www.w3.org/2001/XMLSchema}boolean"
                             select="$Q{urn:x-xspec:compile:impl}test-result instance of Q{http://www.w3.org/2001/XMLSchema}boolean"/>
               <!-- did the test pass? -->
               <xsl:variable name="Q{urn:x-xspec:compile:impl}successful"
                             as="Q{http://www.w3.org/2001/XMLSchema}boolean">
                  <xsl:choose>
                     <xsl:when test="$Q{urn:x-xspec:compile:impl}boolean-test">
                        <xsl:sequence select="$Q{urn:x-xspec:compile:impl}test-result =&gt; boolean()"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:message terminate="yes">ERROR in t:expect ('my scenario label my expect label'): Non-boolean @test must be accompanied by @as, @href, @select, or child node.</xsl:message>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:variable>
               <xsl:if test="not($Q{urn:x-xspec:compile:impl}successful)">
                  <xsl:message>      FAILED</xsl:message>
               </xsl:if>
               <xsl:element name="test" namespace="http://www.jenitennison.com/xslt/xspec">
                  <xsl:attribute name="id" namespace="">dummy-expect-id</xsl:attribute>
                  <xsl:attribute name="successful"
                                 namespace=""
                                 select="$Q{urn:x-xspec:compile:impl}successful"/>
                  <xsl:element name="label" namespace="http://www.jenitennison.com/xslt/xspec">
                     <xsl:text>my expect label</xsl:text>
                  </xsl:element>
                  <xsl:element name="expect-test-wrap" namespace="">
                     <xsl:element name="t:expect" namespace="http://www.jenitennison.com/xslt/xspec">
                        <xsl:attribute name="test" namespace="">false()</xsl:attribute>
                     </xsl:element>
                  </xsl:element>
                  <xsl:if test="not($Q{urn:x-xspec:compile:impl}boolean-test)">
                     <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
                        <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}test-result"/>
                        <xsl:with-param name="report-name" select="'result'"/>
                     </xsl:call-template>
                  </xsl:if>
                  <xsl:call-template name="Q{urn:x-xspec:common:report-sequence}report-sequence">
                     <xsl:with-param name="sequence" select="$Q{urn:x-xspec:compile:impl}expect-d68e5"/>
                     <xsl:with-param name="report-name" select="'expect'"/>
                  </xsl:call-template>
               </xsl:element>
            </xsl:template>
         </content-wrap>
      </result>
      <test id="scenario2-expect1" successful="true">
         <label>is a template</label>
         <expect-test-wrap xmlns="">
            <t:expect xmlns:t="http://www.jenitennison.com/xslt/xspec"
                      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                      test="$t:result instance of element(xsl:template)"/>
         </expect-test-wrap>
         <expect select="()"/>
      </test>
      <test id="scenario2-expect2" successful="true">
         <label>@test must be transformed to xsl:sequence/@select</label>
         <expect-test-wrap xmlns="">
            <t:expect xmlns:t="http://www.jenitennison.com/xslt/xspec"
                      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                      test="$t:result/xsl:variable[@name eq 'Q{urn:x-xspec:compile:impl}test-result']"/>
         </expect-test-wrap>
         <result select="/element()">
            <content-wrap xmlns="">
               <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                             name="Q{urn:x-xspec:compile:impl}test-result"
                             as="item()*">
                  <xsl:choose>
                     <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
                        <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                           <xsl:sequence xmlns:t="http://www.jenitennison.com/xslt/xspec"
                                         select="false()"
                                         version="3"/>
                        </xsl:for-each>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:sequence xmlns:t="http://www.jenitennison.com/xslt/xspec"
                                      select="false()"
                                      version="3"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:variable>
            </content-wrap>
         </result>
         <expect select="/element()">
            <content-wrap xmlns="">
               <xsl:variable xmlns:t="http://www.jenitennison.com/xslt/xspec"
                             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                             name="Q{urn:x-xspec:compile:impl}test-result"
                             as="item()*">
                  <xsl:choose>
                     <xsl:when test="count($Q{urn:x-xspec:compile:impl}test-items) eq 1">
                        <xsl:for-each select="$Q{urn:x-xspec:compile:impl}test-items">
                           <xsl:sequence select="false()" version="3"/>
                        </xsl:for-each>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:sequence select="false()" version="3"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:variable>
            </content-wrap>
         </expect>
      </test>
   </scenario>
</report>
